#!/bin/bash

PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin

perl - $@ <<-'EOF' 

use strict;
sub logger($);

####################################################################################
my $map=qq(
 01:0414437323764:tslp001229.oss.ads
 02:0414437323744:tslp001228.oss.ads
 0814420550000000000102
 0814420570000000000101
 0a11346322000000000102
 0a11346320000000000101
 0d14420440000000000102
 0d14420460000000000102
 0d14420400000000000101
 0d14420420000000000101
 0611347142200000000002
 0611347142300000000001
 0811346335000000000002
 0811346317400000000002
 0811346333000000000001
 0811346317000000000001
);
# END
####################################################################################

if ( $< ){
	logger "This script must be run as root\n";
	exit 1;
}

unless ( open LOG, ">>/var/tmp/add_static_route.log" ){
	logger "Cannot open log file /var/tmp/add_static_route.log for writing.\n";
	exit 2;
}

{
	my $date=gmtime();
	my $args=join " ", @ARGV;
	logger "\n\n" . ("#"x79) . "\n# $date --- Executing Static Route Add Script\n# Args: $args\n";
	logger (("#"x79) . "\n");
}

my $file_timestamp;
{
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime();
	$file_timestamp= sprintf "%04d-%02d-%02d.%02d:%02d:%02d", ($year+1900) , ($mon+1) , $mday , $hour , $min , $sec;
}

my $os_major;
my $os_minor;
my $os_release_name;
{
	my $kernel;
	open UNAME, 'uname -sr|';
	( $kernel, $os_major)=split " ", <UNAME>;
	close UNAME;

	if ( $kernel ne "Linux" ){
		logger "This does not look like a Linux server\n";
		logger "Aborting...\n";
		exit 3;
	}

	chomp $os_major;
	$os_major =~ s/^.*el(.).*$/\1/;

	{
		open RPM, 'rpm -q --queryformat "%{NAME} %{VERSION} %{RELEASE}\n" -f /etc/redhat-release|';
		my ($name,$version,$release)=split " ", <RPM>;
		$os_release_name=$name;
		close RPM;

		#print "name: $name\n";
		#print "version: $version\n";
		#print "release: $release\n";

		if ( $os_major == 7 ){
			( $os_minor=$version ) =~ s/^7\.(\d{1,2})$/$1/;
		} elsif ( $name =~ /^redhat-release/ ){
			( $os_minor=$release ) =~ s/^\d\.(\d{1,2}).*$/$1/;
		} elsif ( $name =~ /^oraclelinux-release/ ){
			( $os_minor=$release ) =~ s/(\d{1,2}).*$/$1/;
		} elsif ( $name =~ /^enterprise-release/ ){
			( $os_minor=$release ) =~ s/(\d{1,2}).*$/$1/;
		}

		if ( $os_minor !~ /^\d{1,2}$/ ){
			print qq{Minor release "$os_minor" does not look correct.\n};
			print "Aborting...\n";
			exit 4;
		}

	}
}



logger "OS:        $os_release_name\n";
logger "OS_VER:    $os_major.$os_minor\n";

my $IP_LIST=get_my_ips();
#for my $IP ( @$IP_LIST ){
#	logger "IP: $IP->{nic} $IP->{ip}/$IP->{mask_bits}\n";
#}


my $KNOWN_NET_LIST=get_nets();
my ($NET,$IP)=find_net( $KNOWN_NET_LIST, $IP_LIST );
unless ($NET){
	logger qq{This server is not on a network that is known to this script. Sorry!\n};
	logger "Aborting...\n";
	exit 5;
}
logger "GATEWAY:   $NET->{gateway}\n";
logger "NETWORK:   $NET->{network}\n";
logger "NIC:       $IP->{nic}\n";

unless ($NET->{SCANNER}){
	logger qq{Network $NET->{network} is known, but scanner server not defined. Sorry!\n};
	logger "Aborting...\n";
	exit 6;
}
logger "SCANNER:    $NET->{SCANNER}{name}\n";
logger "SCANNER_IP: $NET->{SCANNER}{ip}\n";
logger "SCANNER_NET:$NET->{SCANNER}{network}\n";


{
	open PUPPET_FLAG, ">/root/.puppet_flag_scanner_routes";
	close PUPPET_FLAG;
	logger "\n#". "-"x78 . "\n";
	logger "# ROUTING\n";
	logger "#" . "-"x78 . "\n";
	if ( $NET->{gateway} and $NET->{SCANNER}{network} ){
                create_static_route( $IP->{nic}, $NET );
        } else {
                logger "Static route not required for this host. Relying on default gateway.\n";
        }
}

exit 0;

#############################################################

sub get_my_ips {
	my $IP__LIST=[];
	open IP, "ip -o addr list scope global|";
	for my $line (<IP>){
		chomp $line;
		next unless $line =~ /inet/;
		my ($nic,$cidr_ip)=(split " ", $line)[1,3];
		my ($ip,$mask_bits)=split "/", $cidr_ip;
		#$ip   =~ s/^.*inet\s*(.*?)\/.*$/$1/;
		my $int_ip=0;
		for my $byte ( split /\./, $ip ){
			$int_ip <<= 8;
			$int_ip = $int_ip | $byte;
		}
		push @$IP__LIST, {
			ip => $ip,
			int_ip => $int_ip,
			nic => $nic,
			mask_bits => $mask_bits,
		};
	}
	close IP;
	return $IP__LIST;
}

sub get_nets {
	my $KNOWN_NET_LIST=[];
	my $SCANNER_LIST=[];
	for my $line ( split " ", $map ){
		$line =~ s/^\s*(.*?)\s*$/$1/; # strip white space + newline
		#chomp $line;
		next unless ( $line );

		if ( $line =~ /^\d\d:/ ){
			my ( $index, $addr, $scanner_server )=split /:/, $line;
			my $host_bits=hex(substr $addr,    0, 2);
			my $int_netmask =  ( 0xFFFFFFFF << $host_bits ) & 0xFFFFFFFF ;
			my $int_ip=oct(substr $addr,  2, 11);
			my $int_network=$int_netmask  & $int_ip;
			my $ip=join '.', unpack 'C4', pack 'N', $int_ip;
			my $network;
			if ( $int_netmask > 0 ){
				$network=join '.', unpack 'C4', pack 'N', $int_network;
			} else {
				# Interpret netmask 0.0.0.0 as a special case.
				# It means we don't want create static routes to the scanner server!
				$network=""
			}
			my $SCANNER={
				ip   => $ip,
				name => $scanner_server,
				mask_bits => 32-$host_bits,
				network   => $network,
			};
			$SCANNER_LIST->[$index]=$SCANNER;
		} else {
			my $host_bits=hex(substr $line,    0, 2);
			my $int_network=oct(substr $line,  2, 11);
			my $int_gateway_offset=hex(substr $line, 13, 7);
			my $index=hex(substr $line, 20, 2);
			my $int_gateway= $int_gateway_offset > 0 ? $int_network + $int_gateway_offset : "0";
	
			my $NETWORK={
				int_network => $int_network,
				int_netmask => ( ( 0xFFFFFFFF << $host_bits ) & 0xFFFFFFFF ),
				int_gateway => $int_gateway,
				gateway =>   ( $int_gateway > 0 ? (join '.', unpack 'C4', pack 'N', $int_gateway) : ""),
				network => (join '.', unpack 'C4', pack 'N', $int_network),
				SCANNER => $SCANNER_LIST->[$index],
			};
			push @$KNOWN_NET_LIST, $NETWORK;
		}
	}
	return $KNOWN_NET_LIST;
}

sub find_net {
        my ($KNOWN_NET_LIST,$IP_LIST)=@_;
        for my $NET ( @$KNOWN_NET_LIST ){
                for my $IP ( @$IP_LIST ){
			#logger "checking $IP->{ip} ($IP->{int_ip}) against $NET->{network} ($NET->{int_network})\n";
                        if ( ( $IP->{int_ip} & $NET->{int_netmask} ) == $NET->{int_network} ){
                                return $NET,$IP;
                        }
                }
        }
	# if we got this far we have not found a match.
	return;
}



sub create_static_route {
	my $nic=shift;
	my $NET=shift;
	my $SCANNER=$NET->{SCANNER};
        my $route_file="/etc/sysconfig/network-scripts/route-$nic";
        my $route_file_saved="/var/tmp/route-$nic.$file_timestamp";

        my $new_route_entry=qq{$SCANNER->{network}/$SCANNER->{mask_bits} via $NET->{gateway} dev $nic};

        if ( ! -f $route_file ){
                logger qq{Route file "$route_file" does not exist or is not a regular file.\n};
                logger "Aborting...\n";
                exit 9;
        }

        # Do a quick check to make sure the gateway seems somewhat valid.
        if ( $NET->{gateway} !~ /^\d+\.\d+\.\d+\.\d+$/ ){
                logger qq{Gateway "$NET->{gateway}" does not look like an IP address.\n};
                logger "Aborting...\n";
                exit 10;
        }

	{
                logger qq{#### Current kernel routing table ##############\n};
        	open IP_ROUTE, "ip route|";
		while (<IP_ROUTE>){
			logger " $_";
		}
		close IP_ROUTE;
                logger qq{################################################\n};

                logger qq{#### Current contents of $route_file\n};
        	open ROUTE_FILE, "$route_file";
		while (<ROUTE_FILE>){
			logger " $_";
		}
		close ROUTE_FILE;
                logger qq{################################################\n};
	}

        logger "\nChecking existing static route...\n";
        open IP_ROUTE, "ip -o route get $SCANNER->{ip}|";
        my $line = <IP_ROUTE>;
	close IP_ROUTE;
        chomp $line;
        logger "$line\n";
        if ( ((split " ", $line)[2]) ne $NET->{gateway} ){
                logger "\nStatic route to $SCANNER->{network} is missing.\n";
                logger "\nAdding static route to kernel routing table...\n";
                runsyscmd("ip route add $new_route_entry");
        } else {
		logger "Required route already exists in kernel routing table. OK.\n";
        }


	open ROUTE_FILE, "$route_file";
	my $match=0;
	for my $line (<ROUTE_FILE>){
		if ( $line =~ /^$SCANNER->{network}/ ){
			logger "\nRouting file $route_file already contains static route for $SCANNER->{network}. OK.\n";
			$match=1;
			last;
		}
	}
	close ROUTE_FILE;

	unless ( $match ){
		logger qq{\nSaving contents of $route_file to $route_file_saved.\n};
		open ROUTE_FILE, "$route_file";
		open ROUTE_FILE_SAVED, ">$route_file_saved";
		for my $line (<ROUTE_FILE>){
			print ROUTE_FILE_SAVED $line;
		}
		close ROUTE_FILE;
		close ROUTE_FILE_SAVED;

		logger qq{Appending "$new_route_entry" to $route_file\n};
		open ROUTE_FILE, ">>$route_file";
		print ROUTE_FILE "$new_route_entry\n";
		close ROUTE_FILE;
	}

}

# run system command, capture STDOUT, use "logger" to send to both STDOUT and log file
sub runsyscmd{
	my $cmd=shift;
	logger " command is:\n  $cmd\n";
	unless ( open CMD, "$cmd|" ){
		logger "Unable to execute $cmd\n";
		logger "Aborting\n";
		exit 100;
	}
	for my $output ( <CMD> ){
		logger $output;
	}
	unless ( close CMD ){
		logger ( $! ? "Error closing pipe: $!\n" : "Exit status of cmd is $?\n" );
		exit 101;
	}
}


# run system command and let all STDOUT from command go to STDOUT
sub runsyscmd2{
	my $cmd=shift;
	my @cmd=split " ", $cmd;
	logger " command is:\n  $cmd\n";
	system("$cmd");
	if ($? == -1) {
		logger qq{failed to execute "$cmd[0]": $!\n};
		logger "Aborting...\n";
		exit 11;
	} elsif ($? & 127) {
		logger (sprintf "child died with signal %d, %s coredump\n", ($? & 127),  ($? & 128) ? 'with' : 'without');
		logger "Aborting...\n";
		exit 12;
	} elsif ( $? >> 8 ) {
		logger (sprintf "child exited with value %d\n", $? >> 8);
		logger "Aborting...\n";
		exit 13;
	} else {
		logger " OK\n\n";
	}
}


sub logger($){
        my $log=shift;
        print $log;
        print LOG $log;
}


EOF
